#!/usr/bin/env python3

import click
import json
import sys

from bundle import allowlist_json_from_eval
from bundle import extract_bundle
from bundle import generate_bundle


@click.group()
@click.option(
        '--bundle-dir', '-b',
        type=click.Path(),
        help='path to policy bundle component directory',
)
@click.option('--debug/--no-debug',
        help='display verbose output for debugging',
)
@click.pass_context
def cli(ctx, bundle_dir, debug):
    """
    Anchore policy bundle management utility
    """
    ctx.obj = {
        'bundle_dir': bundle_dir,
        'debug': debug,
    }


@cli.command(no_args_is_help=True)
@click.option('--compliance','-c',
        type=click.File(),
        envvar='ANCHORE_EVAL_COMPLIANCE',
        default='compliance.json',
        help="path to compliance report JSON file",
)
@click.option(
        '--gates', '-g',
        type=click.File(),
        envvar='ANCHORE_EVAL_GATES',
        default='gates.csv',
        help="path to gates report CSV file",
)
@click.option(
        '--security', '-s',
        type=click.File(),
        envvar='ANCHORE_EVAL_SECURITY',
        default='security.csv',
        help="path to security (CVEs) report CSV file",
)
@click.pass_context
def allow(ctx, compliance, gates, security):
    """
    Generate an allowlist from eval output files
    """
    allowlist_json_from_eval(ctx, compliance, gates, security)


@cli.command(no_args_is_help=True)
@click.argument('source',
        type=click.File()
)
@click.pass_context
def extract(ctx, source):
    """
    Extract bundle components from source into bundle-dir
    """
    extract_bundle(ctx, source)


@cli.command()
@click.pass_context
def generate(ctx):
    """
    Generate a policy bundle from components in bundle-dir
    """
    generate_bundle(ctx)


@cli.command(no_args_is_help=True)
@click.argument('allowlist')
@click.argument('mapping')
@click.option(
        '--map-pattern', '-p',
        type=str,
        help='pattern to match images'
)
@click.pass_context
def map(ctx, allowlist, mapping, map_pattern):
    """
    Map an allowlist to an image pattern
    """
    map_allowlist(ctx, allowlist, mapping, map_pattern)


if __name__ == "__main__":
    #cli(auto_envvar_prefix='ANCHORE_BUNDLE')
    cli()
