#!/usr/bin/env python3

import click
import json
import sys

from bundle import allowlist_json_from_eval
from bundle import extract_bundle
from bundle import generate_bundle


verbose = False


@click.group()
@click.option('--debug/--no-debug')
def cli(debug):
    """
    Anchore policy bundle management utility
    """
    click.echo('Debug mode is %s' % ('on' if debug else 'off'))
    pass


@cli.command(no_args_is_help=True)
@click.option('--compliance','-c',
        type=click.File(),
        envvar='ANCHORE_EVAL_COMPLIANCE',
        default='compliance.json',
        help="path to compliance report JSON file",
)
@click.option(
        '--gates', '-g',
        type=click.File(),
        envvar='ANCHORE_EVAL_GATES',
        default='gates.csv',
        help="path to gates report CSV file",
)
@click.option(
        '--security', '-s',
        type=click.File(),
        envvar='ANCHORE_EVAL_SECURITY',
        default='security.csv',
        help="path to security (CVEs) report CSV file",
)
@click.option(
        '--bundle-dir', '-b',
        type=click.Path(),
        envvar='ANCHORE_BUNDLE_DIR',
        default='bundle',
        help='path to policy bundle component directory',
)
def allow_from_eval(compliance, gates, security, bundle_dir):
    """
    Generate an allowlist from eval output files
    """
    allowlist_json_from_eval(compliance, gates, security, bundle_dir)


@cli.command(no_args_is_help=True)
@click.argument('source',
        type=click.File()
)
@click.option(
        '--bundle-dir', '-b',
        type=click.Path(),
        help='path to policy bundle component directory',
)
def extract(source, bundle_dir):
    """
    Extract bundle components from source into bundle-dir
    """
    extract_bundle(source, bundle_dir)


@cli.command(no_args_is_help=True)
@click.argument('source')
@click.option(
        '--bundle-id', '-i',
        type=str,
        help='bundle id (used by anchore-cli to identify bundle)',
)
@click.option(
        '--bundle-dir', '-b',
        type=click.Path(),
        help='path to policy bundle component directory',
)
def generate(bundle_dir):
    """
    Generate a policy bundle from components in bundle-dir
    """
    generate_bundle(bundle_id, bundle_dir)


@cli.command(no_args_is_help=True)
@click.argument('allowlist')
@click.argument('mapping')
@click.option(
        '--map-pattern', '-p',
        type=str,
        help='pattern to match images'
)
@click.option(
        '--bundle-dir', '-b',
        type=click.Path(),
        help='path to policy bundle component directory',
)
def map(allowlist, mapping, map_pattern, bundle_dir):
    """
    Map an allowlist to an image pattern
    """
    map_allowlist(allowlist, mapping, map_pattern, bundle_dir)


if __name__ == "__main__":
    #cli(auto_envvar_prefix='ANCHORE_BUNDLE')
    cli()
